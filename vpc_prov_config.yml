---
- hosts: localhost  
  connection: local  
  gather_facts: false
  vars:  
    region: us-west-2

    vpc_name: "demo_vpc"
    vpc_cidr: 10.0.0.0/16

    subnet_cidr: 10.0.1.0/24
    subnet_name: "demo_subnet"

    igw_name: "demo_gateway"

    rt_name: "demo_rt"
    default_cidr: "0.0.0.0/0"

    sg_name: "demo_security_group"
    sg_description: "demo_security_group description"
    bcit_cidr: 142.232.0.0/16

    ami_id: "ami-d2c924b2"
    ec2_instance_name: "demo_ec2_instance"
    ec2_instance_type: "t2.micro"
    ec2_instance_group: "demo"
    ssh_key_name: KeyPair

  tasks:  

## Provisioning
    - name: create vpc
      #Note ec2_vpc is not used here as it will doesn't allow fine enough contorl 
      # Additionally it may be decprecated in future: https://github.com/ansible/ansible-modules-core/pull/1133
      ec2_vpc_net:
        state: present 
        region: "{{ region }}"
        cidr_block: "{{ vpc_cidr }}"
        multi_ok: no
        name: "{{ vpc_name }}"
      register: vpc_var
      tags:
        - provision

    - name: output vpc data
      debug: 
        msg: "{{ vpc_var }}"
      tags:
        - debug

    - name: output vpc id
      debug: 
        msg: "{{ vpc_var.vpc.id }}"
      tags:
        - debug

    - name: create subnet
      ec2_vpc_subnet:
        state: present 
        region: "{{ region }}"
        cidr: "{{ subnet_cidr }}"
        vpc_id: "{{ vpc_var.vpc.id }}"
        tags: 
          Name: "{{ subnet_name }}"
      register: subnet_var
      tags:
        - provision

    - name: output subnet data
      debug:
        msg: "{{ subnet_var }}"
      tags:
        - debug

    - name: output subnet id
      debug:
        msg: "{{ subnet_var.subnet.id }}"
      tags:
        - debug

    - name: add internet gateway to vpc
      ec2_vpc_igw:
        region: "{{ region }}"
        vpc_id: "{{ vpc_var.vpc.id }}"
        state: present
      register: igw_var
      tags:
        - provision

    - name: Tag internet gateway with a name
      ec2_tag:
        resource: "{{ igw_var.gateway_id }}"
        state: present
        region: "{{ region }}"
        tags:
          Name: "{{ igw_name }}"
      tags:
        - provision

    - name: output igw data
      debug: 
        msg: "{{ igw_var }}"
      tags:
        - debug

    - name: output igw id
      debug: 
        msg: "{{ igw_var.gateway_id }}"
      tags:
        - debug

    - name: create routing table
      ec2_vpc_route_table:
        region: "{{ region }}"
        vpc_id: "{{ vpc_var.vpc.id }}"
        state: present
        routes:
          - dest: "{{ default_cidr }}"
            gateway_id: "{{ igw_var.gateway_id }}"
        subnets:
          -  "{{ subnet_var.subnet.id }}"
        tags:
          Name: "{{ rt_name }}"
      register: rt_var
      tags:
        - provision

    - name: output routing table data
      debug: 
        msg: "{{ rt_var }}"
      tags:
        - debug

    - name: output routing table id
      debug: 
        msg: "{{ rt_var.route_table.id }}"
      tags:
        - debug

    - name: create security group
      ec2_group: 
        region: "{{ region }}"
        vpc_id: "{{ vpc_var.vpc.id }}"
        state: present
        name: "{{ sg_name }}"
        description: "{{ sg_description }}"
        purge_rules: true
        rules:
          - proto: tcp 
            from_port: 22 # beginning of port range
            to_port: 22   # end of port range
            cidr_ip: "{{ bcit_cidr }}"
          - proto: tcp 
            from_port: 80
            to_port: 80
            cidr_ip: "{{ bcit_cidr }}"
          - proto: tcp 
            from_port: 443
            to_port: 443
            cidr_ip: "{{ bcit_cidr }}"
        purge_rules_egress: true
        rules_egress:
      register: sg_var
      tags:
        - provision

    - name: output security group data
      debug: 
        msg: "{{ sg_var }}"
      tags:
        - debug

    - name: output security group id
      debug: 
        msg: "{{ sg_var.group_id }}"
      tags:
        - debug

    - name: output user data
      debug: 
        msg: "{{ lookup('file','./ec2_userdata.yml') }}" 
      tags:
        - debug

    - name: create ec2 instance
      ec2:
        region: "{{ region }}"
        image: "{{ ami_id }}"
        exact_count: 1
        count_tag:
          Name: "{{ ec2_instance_name }}"
        instance_type: "{{ ec2_instance_type }}"
        key_name: "{{ ssh_key_name }}"
        group: "{{ sg_name }}"
        vpc_subnet_id: "{{ subnet_var.subnet.id }}"
        #be carefull with contents of the user file as its contents are retrieved
        #and inserted below as a string, be careful with quotes and parenthesis 
        user_data: "{{ lookup('file','./ec2_userdata.yml') }}" 
        volumes:
          - device_name: /dev/sda1
            delete_on_termination: true
            volume_size: 8
        instance_tags:
          Name: "{{ ec2_instance_name }}"
          group: "{{ ec2_instance_group }}"
        wait: yes
      register: ec2_var
      tags:
        - provision 

    - name: output ec2 data
      debug: 
        msg: "{{ ec2_var }}"
      when: ec2_var is defined 
      tags:
        - debug

    - name: output ec2 id
      debug: 
        msg: "{{ ec2_var.instances[0].id }}"
      when:  ec2_var.instances[0].id is defined
      tags:
        - debug

    - name: get ec2 instance info
      ec2_remote_facts:
        region: "{{ region }}"
        filters:
          #Note terminated instances live for half an hour
          #Don't return them
          # see http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html
          # for list of avialable filters
          "tag:Name": "{{ ec2_instance_name }}"
          instance-state-name: running
      register: ec2_retrieved
      tags:
        - provision
        - report
        - cleanup
        - debug

    - name: output retrieved ec2 data
      debug: 
        msg: "{{ ec2_retrieved }}"
      when: ec2_retrieved is defined 
      tags:
        - debug

    - name: output retrieved ec2 id
      debug: 
        msg: "{{ ec2_retrieved.instances[0].id }}"
      when: ec2_retrieved.instances[0].id is defined 
      tags:
        - debug
    
    - name: associate elastic ip
      ec2_eip: 
        region: "{{ region }}"
        in_vpc: true
        state: present
        device_id: "{{ ec2_retrieved.instances[0].id }}"
        reuse_existing_ip_allowed: yes
      register: eip_var
      tags:
        - provision
      notify:
        - refresh aws dynamic inventory

    - meta: flush_handlers 
      tags:
        - provision

    - meta: refresh_inventory
      tags:
        - provision

    - name: output elastic ip data
      debug: 
        msg: "{{ eip_var }}"
      when: eip_var is defined 
      tags:
        - debug

    - name: output elastic ip id
      debug: 
        msg: "{{ eip_var.allocation_id }}"
      when: eip_var.allocation_id is defined 
      tags:
        - debug

    - name: output elastic ip public address
      debug: 
        msg: "{{ eip_var.public_ip }}"
      when: eip_var.allocation_id is defined 
      tags:
        - debug

    - name: Wait until SSH is available on ec2 instance
      wait_for:
        host: "{{ eip_var.public_ip  }}"
        port: 22 
        delay: 10
        connect_timeout: 20 
        timeout: 120
        state: started
      tags:
        - provision

    - name: Wait until Cloud-Init completes
      wait_for:
        timeout: 10
      tags:
        - provision


    - name: get vpc info
      ec2_vpc_net_facts:
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ vpc_name }}"
      register: vpc_retrieved
      tags:
        - report
        - cleanup

    - name: output retrieved vpc 
      debug: 
        msg: "{{ vpc_retrieved }}"
      when: vpc_retrieved is defined
      tags:
        - report

    - name: output retrieved vpc id
      debug: 
        msg: "{{ vpc_retrieved.vpcs[0].id }}"
      when: vpc_retrieved.vpcs[0].id is defined
      tags:
        - report

    - name: get subnet info
      ec2_vpc_subnet_facts:
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ subnet_name }}"
      register: subnet_retrieved
      tags:
        - report
        - cleanup

    - name: output retrieved subnet 
      debug: 
        msg: "{{ subnet_retrieved }}"
      when: subnet_retrieved is defined
      tags:
        - report

    - name: output retrieved subnet id
      debug: 
        msg: "{{ subnet_retrieved.subnets[0].id }}"
      when: subnet_retrieved.subnet[0].id is defined
      tags:
        - report

    - name: get route table info
      ec2_vpc_route_table_facts:
        region: "{{ region }}"
        filters:
          "tag:Name": "{{ rt_name }}"
      register: rt_retrieved
      tags:
        - report
        - cleanup

    - name: output retrieved rt
      debug: 
        msg: "{{ rt_retrieved }}"
      when: rt_retrieved is defined
      tags:
        - report

    - name: output retrieved rt id
      debug: 
        msg: "{{ rt_retrieved.route_tables[0].id }}"
      when: rt_retrieved.route_tables[0].id is defined
      tags:
        - report

    - name: get elastic ips 
      shell: aws ec2 describe-addresses
      register: awscli_output 
      tags:
        - report
        - cleanup

    - name: parse awscli output and create elastic ip variable
      set_fact:
        eips_retrieved: "{{ awscli_output.stdout }}"
      when: awscli_output.stdout is defined
      tags:
        - report
        - cleanup
      
    - name: output retrieved eip info
      debug: 
        msg: "{{ eips_retrieved }}"
      when: eips_retrieved is defined
      tags:
        - report

    - name: output retrieved eip public_ip
      debug: 
        msg: "{{ eips_retrieved.Addresses[0].PublicIp }}"
      when: eips_retrieved.Addresses[0].PublicIp is defined
      tags:
        - report

    - name: output retrieved ec2 instance info
      debug: 
        msg: "{{ ec2_retrieved}}"
      when: ec2_retrieved is defined
      tags:
        - report

    - name: output retrieved ec2 instance id
      debug: 
        msg: "{{ ec2_retrieved.instances[0].id }}"
      when: ec2_retrieved.instances[0].id is defined
      tags:
        - report

    - name: terminate ec2 instance
      ec2:
        region: "{{ region }}"
        instance_ids: "{{ ec2_retrieved.instances[0].id }}"
        state: absent
        wait: yes
      when: ec2_retrieved.instances[0].id is defined
      tags:
        - cleanup
      notify:
        - refresh aws dynamic inventory

    - meta: flush_handlers 
      tags:
        - cleanup

    - meta: refresh_inventory
      tags:
        - cleanup

    - name: delete security group
      ec2_group: 
        region: "{{ region }}"
        vpc_id: "{{ vpc_retrieved.vpcs[0].id }}"
        state: absent
        name: "{{ sg_name }}"
        description: "{{ sg_description }}"
        purge_rules: true
      when: vpc_retrieved.vpcs[0].id is defined
      tags:
        - cleanup

    - name: release elastic ip
      ec2_eip: 
        region: "{{ region }}"
        in_vpc: true
        state: absent
        public_ip: "{{ eips_retrieved.Addresses[0].PublicIp }}"
      when: eips_retrieved.Addresses[0].PublicIp is defined
      tags:
        - cleanup

    - name: delete subnet
      ec2_vpc_subnet:
        state: absent
        region: "{{ region }}"
        cidr: "{{ subnet_cidr }}"
        vpc_id: "{{ vpc_retrieved.vpcs[0].id }}"
        tags: 
          Name: "{{ subnet_name }}"
      when: subnet_retrieved.subnets[0] is defined
      tags:
        - cleanup

    - name: delete internet gateway
      ec2_vpc_igw:
        region: "{{ region }}"
        vpc_id: "{{ vpc_retrieved.vpcs[0].id  }}"
        state: absent
      when: vpc_retrieved.vpcs[0].id is defined
      tags:
        - cleanup

    - name: delete routing table
      ec2_vpc_route_table:
        region: "{{ region }}"
        vpc_id: "{{ vpc_retrieved.vpcs[0].id  }}"
        state: absent
        route_table_id: "{{ rt_retrieved.route_tables[0].id }}"
      when: rt_retrieved.route_tables[0].id is defined
      tags:
        - cleanup

    - name: delete vpc
      ec2_vpc:
        state: absent
        region: "{{ region }}"
        cidr_block: "{{ vpc_cidr }}"
        vpc_id: "{{ vpc_retrieved.vpcs[0].id  }}"
        resource_tags: "{}"
        wait: yes
      when: vpc_retrieved.vpcs[0].id is defined
      tags:
        - cleanup

  handlers:
    - name: refresh aws dynamic inventory
      command: ./inventory/ec2.py --refresh-cache
  
    - name: refresh ansible in memory inventory
      meta: refresh_inventory

- hosts: tag_group_demo
  vars:
    ansible_ssh_private_key_file: ~/.ssh/KeyPair.pem
    ansible_user: centos
  tags:
    - configure
  tasks:
    - name: output inventory word press hosts
      debug: 
        msg: "{{ ansible_hostname }}: {{ inventory_hostname }} "
...
